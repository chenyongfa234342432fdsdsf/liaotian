{
  "version": 3,
  "sources": ["../../.pnpm/moo@0.5.2/node_modules/moo/moo.js", "../../.pnpm/@messageformat+parser@5.1.0/node_modules/@messageformat/parser/lib/lexer.js", "../../.pnpm/@messageformat+parser@5.1.0/node_modules/@messageformat/parser/lib/parser.js", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/compile/compileMessage.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/essentials.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/formats.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/context.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/eventEmitter.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/i18n.ts", "../../.pnpm/@lingui+core@3.17.2/node_modules/@lingui/core/src/index.ts"],
  "sourcesContent": ["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n  var toString = Object.prototype.toString\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && toString.call(o) === '[object RegExp]' }\n  function isObject(o) { return o && typeof o === 'object' && !isRegExp(o) && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    if (!regexps.length) return '(?!)'\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) throw new Error('RegExp /i flag not allowed')\n      if (obj.global) throw new Error('RegExp /g flag is implied')\n      if (obj.sticky) throw new Error('RegExp /y flag is implied')\n      if (obj.multiline) throw new Error('RegExp /m flag is implied')\n      return obj.source\n\n    } else {\n      throw new Error('Not a pattern: ' + obj)\n    }\n  }\n\n  function pad(s, length) {\n    if (s.length > length) {\n      return s\n    }\n    return Array(length - s.length + 1).join(\" \") + s\n  }\n\n  function lastNLines(string, numLines) {\n    var position = string.length\n    var lineBreaks = 0;\n    while (true) {\n      var idx = string.lastIndexOf(\"\\n\", position - 1)\n      if (idx === -1) {\n        break;\n      } else {\n        lineBreaks++\n      }\n      position = idx\n      if (lineBreaks === numLines) {\n        break;\n      }\n      if (position === 0) {\n        break;\n      }\n    }\n    var startPosition = \n      lineBreaks < numLines ?\n      0 : \n      position + 1\n    return string.substring(startPosition).split(\"\\n\")\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = [].concat(thing)\n      if (key === 'include') {\n        for (var j = 0; j < rules.length; j++) {\n          result.push({include: rules[j]})\n        }\n        continue\n      }\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i = 0; i < array.length; i++) {\n      var obj = array[i]\n      if (obj.include) {\n        var include = [].concat(obj.include)\n        for (var j = 0; j < include.length; j++) {\n          result.push({include: include[j]})\n        }\n        continue\n      }\n      if (!obj.type) {\n        throw new Error('Rule has no type: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.type, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(type, obj) {\n    if (!isObject(obj)) {\n      obj = { match: obj }\n    }\n    if (obj.include) {\n      throw new Error('Matching rules cannot also include states')\n    }\n\n    // nb. error and fallback imply lineBreaks\n    var options = {\n      defaultType: type,\n      lineBreaks: !!obj.error || !!obj.fallback,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      fallback: false,\n      value: null,\n      type: null,\n      shouldThrow: false,\n    }\n\n    // Avoid Object.assign(), so we support IE9+\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        options[key] = obj[key]\n      }\n    }\n\n    // type transform cannot be a string\n    if (typeof options.type === 'string' && type !== options.type) {\n      throw new Error(\"Type transform cannot be a string (type '\" + options.type + \"' for token '\" + type + \"')\")\n    }\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    return options\n  }\n\n  function toRules(spec) {\n    return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec)\n  }\n\n  var defaultErrorRule = ruleOptions('error', {lineBreaks: true, shouldThrow: true})\n  function compileRules(rules, hasStates) {\n    var errorRule = null\n    var fast = Object.create(null)\n    var fastAllowed = true\n    var unicodeFlag = null\n    var groups = []\n    var parts = []\n\n    // If there is a fallback rule, then disable fast matching\n    for (var i = 0; i < rules.length; i++) {\n      if (rules[i].fallback) {\n        fastAllowed = false\n      }\n    }\n\n    for (var i = 0; i < rules.length; i++) {\n      var options = rules[i]\n\n      if (options.include) {\n        // all valid inclusions are removed by states() preprocessor\n        throw new Error('Inheritance is not allowed in stateless lexers')\n      }\n\n      if (options.error || options.fallback) {\n        // errorRule can only be set once\n        if (errorRule) {\n          if (!options.fallback === !errorRule.fallback) {\n            throw new Error(\"Multiple \" + (options.fallback ? \"fallback\" : \"error\") + \" rules not allowed (for token '\" + options.defaultType + \"')\")\n          } else {\n            throw new Error(\"fallback and error are mutually exclusive (for token '\" + options.defaultType + \"')\")\n          }\n        }\n        errorRule = options\n      }\n\n      var match = options.match.slice()\n      if (fastAllowed) {\n        while (match.length && typeof match[0] === 'string' && match[0].length === 1) {\n          var word = match.shift()\n          fast[word.charCodeAt(0)] = options\n        }\n      }\n\n      // Warn about inappropriate state-switching options\n      if (options.pop || options.push || options.next) {\n        if (!hasStates) {\n          throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.defaultType + \"')\")\n        }\n        if (options.fallback) {\n          throw new Error(\"State-switching options are not allowed on fallback tokens (for token '\" + options.defaultType + \"')\")\n        }\n      }\n\n      // Only rules with a .match are included in the RegExp\n      if (match.length === 0) {\n        continue\n      }\n      fastAllowed = false\n\n      groups.push(options)\n\n      // Check unicode flag is used everywhere or nowhere\n      for (var j = 0; j < match.length; j++) {\n        var obj = match[j]\n        if (!isRegExp(obj)) {\n          continue\n        }\n\n        if (unicodeFlag === null) {\n          unicodeFlag = obj.unicode\n        } else if (unicodeFlag !== obj.unicode && options.fallback === false) {\n          throw new Error('If one rule is /u then all must be')\n        }\n      }\n\n      // convert to RegExp\n      var pat = reUnion(match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: â€¦ ) instead\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n\n    // If there's no fallback rule, use the sticky flag so we only look for\n    // matches at the current index.\n    //\n    // If we don't support the sticky flag, then fake it using an irrefutable\n    // match (i.e. an empty pattern).\n    var fallbackRule = errorRule && errorRule.fallback\n    var flags = hasSticky && !fallbackRule ? 'ym' : 'gm'\n    var suffix = hasSticky || fallbackRule ? '' : '|'\n\n    if (unicodeFlag === true) flags += \"u\"\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n    return {regexp: combined, groups: groups, fast: fast, error: errorRule || defaultErrorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(toRules(rules))\n    return new Lexer({start: result}, 'start')\n  }\n\n  function checkStateGroup(g, name, map) {\n    var state = g && (g.push || g.next)\n    if (state && !map[state]) {\n      throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n    if (g && g.pop && +g.pop !== 1) {\n      throw new Error(\"pop must be 1 (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n  }\n  function compileStates(states, start) {\n    var all = states.$all ? toRules(states.$all) : []\n    delete states.$all\n\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var ruleMap = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      ruleMap[key] = toRules(states[key]).concat(all)\n    }\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var rules = ruleMap[key]\n      var included = Object.create(null)\n      for (var j = 0; j < rules.length; j++) {\n        var rule = rules[j]\n        if (!rule.include) continue\n        var splice = [j, 1]\n        if (rule.include !== key && !included[rule.include]) {\n          included[rule.include] = true\n          var newRules = ruleMap[rule.include]\n          if (!newRules) {\n            throw new Error(\"Cannot include nonexistent state '\" + rule.include + \"' (in state '\" + key + \"')\")\n          }\n          for (var k = 0; k < newRules.length; k++) {\n            var newRule = newRules[k]\n            if (rules.indexOf(newRule) !== -1) continue\n            splice.push(newRule)\n          }\n        }\n        rules.splice.apply(rules, splice)\n        j--\n      }\n    }\n\n    var map = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(ruleMap[key], true)\n    }\n\n    for (var i = 0; i < keys.length; i++) {\n      var name = keys[i]\n      var state = map[name]\n      var groups = state.groups\n      for (var j = 0; j < groups.length; j++) {\n        checkStateGroup(groups[j], name, map)\n      }\n      var fastKeys = Object.getOwnPropertyNames(state.fast)\n      for (var j = 0; j < fastKeys.length; j++) {\n        checkStateGroup(state.fast[fastKeys[j]], name, map)\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n\n    // Use a JavaScript Map to map keywords to their corresponding token type\n    // unless Map is unsupported, then fall back to using an Object:\n    var isMap = typeof Map !== 'undefined'\n    var reverseMap = isMap ? new Map : Object.create(null)\n\n    var types = Object.getOwnPropertyNames(map)\n    for (var i = 0; i < types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        if (isMap) {\n          reverseMap.set(keyword, tokenType)\n        } else {\n          reverseMap[keyword] = tokenType\n        }\n      })\n    }\n    return function(k) {\n      return isMap ? reverseMap.get(k) : reverseMap[k]\n    }\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.queuedToken = info ? info.queuedToken : null\n    this.queuedText = info ? info.queuedText: \"\";\n    this.queuedThrow = info ? info.queuedThrow : null\n    this.setState(info ? info.state : this.startState)\n    this.stack = info && info.stack ? info.stack.slice() : []\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n      stack: this.stack.slice(),\n      queuedToken: this.queuedToken,\n      queuedText: this.queuedText,\n      queuedThrow: this.queuedThrow,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error\n    this.re = info.regexp\n    this.fast = info.fast\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  var eat = hasSticky ? function(re, buffer) { // assume re is /y\n    return re.exec(buffer)\n  } : function(re, buffer) { // assume re is /g\n    var match = re.exec(buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return this.groups[i]\n      }\n    }\n    throw new Error('Cannot find token type for matched text')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var index = this.index\n\n    // If a fallback token matched, we don't need to re-run the RegExp\n    if (this.queuedGroup) {\n      var token = this._token(this.queuedGroup, this.queuedText, index)\n      this.queuedGroup = null\n      this.queuedText = \"\"\n      return token\n    }\n\n    var buffer = this.buffer\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    // Fast matching for single characters\n    var group = this.fast[buffer.charCodeAt(index)]\n    if (group) {\n      return this._token(group, buffer.charAt(index), index)\n    }\n\n    // Execute RegExp\n    var re = this.re\n    re.lastIndex = index\n    var match = eat(re, buffer)\n\n    // Error tokens match the remaining buffer\n    var error = this.error\n    if (match == null) {\n      return this._token(error, buffer.slice(index, buffer.length), index)\n    }\n\n    var group = this._getGroup(match)\n    var text = match[0]\n\n    if (error.fallback && match.index !== index) {\n      this.queuedGroup = group\n      this.queuedText = text\n\n      // Fallback tokens contain the unmatched portion of the buffer\n      return this._token(error, buffer.slice(index, match.index), index)\n    }\n\n    return this._token(group, text, index)\n  }\n\n  Lexer.prototype._token = function(group, text, offset) {\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (typeof group.type === 'function' && group.type(text)) || group.defaultType,\n      value: typeof group.value === 'function' ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: offset,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      var err = new Error(this.formatError(token, \"invalid syntax\"))\n      throw err;\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    if (token == null) {\n      // An undefined token indicates EOF\n      var text = this.buffer.slice(this.index)\n      var token = {\n        text: text,\n        offset: this.index,\n        lineBreaks: text.indexOf('\\n') === -1 ? 0 : 1,\n        line: this.line,\n        col: this.col,\n      }\n    }\n    \n    var numLinesAround = 2\n    var firstDisplayedLine = Math.max(token.line - numLinesAround, 1)\n    var lastDisplayedLine = token.line + numLinesAround\n    var lastLineDigits = String(lastDisplayedLine).length\n    var displayedLines = lastNLines(\n        this.buffer, \n        (this.line - token.line) + numLinesAround + 1\n      )\n      .slice(0, 5)\n    var errorLines = []\n    errorLines.push(message + \" at line \" + token.line + \" col \" + token.col + \":\")\n    errorLines.push(\"\")\n    for (var i = 0; i < displayedLines.length; i++) {\n      var line = displayedLines[i]\n      var lineNo = firstDisplayedLine + i\n      errorLines.push(pad(String(lineNo), lastLineDigits) + \"  \" + line);\n      if (lineNo === token.line) {\n        errorLines.push(pad(\"\", lastLineDigits + token.col + 1) + \"^\")\n      }\n    }\n    return errorLines.join(\"\\n\")\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    return true\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n    fallback: Object.freeze({fallback: true}),\n    keywords: keywordTransform,\n  }\n\n}));\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lexer = exports.states = void 0;\nconst moo_1 = __importDefault(require(\"moo\"));\nexports.states = {\n    body: {\n        doubleapos: { match: \"''\", value: () => \"'\" },\n        quoted: {\n            lineBreaks: true,\n            match: /'[{}#](?:[^]*?[^'])?'(?!')/u,\n            value: src => src.slice(1, -1).replace(/''/g, \"'\")\n        },\n        argument: {\n            lineBreaks: true,\n            match: /\\{\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*/u,\n            push: 'arg',\n            value: src => src.substring(1).trim()\n        },\n        octothorpe: '#',\n        end: { match: '}', pop: 1 },\n        content: { lineBreaks: true, match: /[^][^{}#']*/u }\n    },\n    arg: {\n        select: {\n            lineBreaks: true,\n            match: /,\\s*(?:plural|select|selectordinal)\\s*,\\s*/u,\n            next: 'select',\n            value: src => src.split(',')[1].trim()\n        },\n        'func-args': {\n            lineBreaks: true,\n            match: /,\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*,/u,\n            next: 'body',\n            value: src => src.split(',')[1].trim()\n        },\n        'func-simple': {\n            lineBreaks: true,\n            match: /,\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*/u,\n            value: src => src.substring(1).trim()\n        },\n        end: { match: '}', pop: 1 }\n    },\n    select: {\n        offset: {\n            lineBreaks: true,\n            match: /\\s*offset\\s*:\\s*\\d+\\s*/u,\n            value: src => src.split(':')[1].trim()\n        },\n        case: {\n            lineBreaks: true,\n            match: /\\s*(?:=\\d+|[^\\p{Pat_Syn}\\p{Pat_WS}]+)\\s*\\{/u,\n            push: 'body',\n            value: src => src.substring(0, src.indexOf('{')).trim()\n        },\n        end: { match: /\\s*\\}/u, pop: 1 }\n    }\n};\nexports.lexer = moo_1.default.states(exports.states);\n", "\"use strict\";\n/**\n * An AST parser for ICU MessageFormat strings\n *\n * @packageDocumentation\n * @example\n * ```\n * import { parse } from '@messageformat/parser\n *\n * parse('So {wow}.')\n * [ { type: 'content', value: 'So ' },\n *   { type: 'argument', arg: 'wow' },\n *   { type: 'content', value: '.' } ]\n *\n *\n * parse('Such { thing }. { count, selectordinal, one {First} two {Second}' +\n *       '                  few {Third} other {#th} } word.')\n * [ { type: 'content', value: 'Such ' },\n *   { type: 'argument', arg: 'thing' },\n *   { type: 'content', value: '. ' },\n *   { type: 'selectordinal',\n *     arg: 'count',\n *     cases: [\n *       { key: 'one', tokens: [ { type: 'content', value: 'First' } ] },\n *       { key: 'two', tokens: [ { type: 'content', value: 'Second' } ] },\n *       { key: 'few', tokens: [ { type: 'content', value: 'Third' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'octothorpe' }, { type: 'content', value: 'th' } ] }\n *     ] },\n *   { type: 'content', value: ' word.' } ]\n *\n *\n * parse('Many{type,select,plural{ numbers}selectordinal{ counting}' +\n *                          'select{ choices}other{ some {type}}}.')\n * [ { type: 'content', value: 'Many' },\n *   { type: 'select',\n *     arg: 'type',\n *     cases: [\n *       { key: 'plural', tokens: [ { type: 'content', value: 'numbers' } ] },\n *       { key: 'selectordinal', tokens: [ { type: 'content', value: 'counting' } ] },\n *       { key: 'select', tokens: [ { type: 'content', value: 'choices' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'content', value: 'some ' }, { type: 'argument', arg: 'type' } ] }\n *     ] },\n *   { type: 'content', value: '.' } ]\n *\n *\n * parse('{Such compliance')\n * // ParseError: invalid syntax at line 1 col 7:\n * //\n * //  {Such compliance\n * //        ^\n *\n *\n * const msg = '{words, plural, zero{No words} one{One word} other{# words}}'\n * parse(msg)\n * [ { type: 'plural',\n *     arg: 'words',\n *     cases: [\n *       { key: 'zero', tokens: [ { type: 'content', value: 'No words' } ] },\n *       { key: 'one', tokens: [ { type: 'content', value: 'One word' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'octothorpe' }, { type: 'content', value: ' words' } ] }\n *     ] } ]\n *\n *\n * parse(msg, { cardinal: [ 'one', 'other' ], ordinal: [ 'one', 'two', 'few', 'other' ] })\n * // ParseError: The plural case zero is not valid in this locale at line 1 col 17:\n * //\n * //   {words, plural, zero{\n * //                   ^\n * ```\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.ParseError = void 0;\nconst lexer_js_1 = require(\"./lexer.js\");\nconst getContext = (lt) => ({\n    offset: lt.offset,\n    line: lt.line,\n    col: lt.col,\n    text: lt.text,\n    lineBreaks: lt.lineBreaks\n});\nconst isSelectType = (type) => type === 'plural' || type === 'select' || type === 'selectordinal';\nfunction strictArgStyleParam(lt, param) {\n    let value = '';\n    let text = '';\n    for (const p of param) {\n        const pText = p.ctx.text;\n        text += pText;\n        switch (p.type) {\n            case 'content':\n                value += p.value;\n                break;\n            case 'argument':\n            case 'function':\n            case 'octothorpe':\n                value += pText;\n                break;\n            default:\n                throw new ParseError(lt, `Unsupported part in strict mode function arg style: ${pText}`);\n        }\n    }\n    const c = {\n        type: 'content',\n        value: value.trim(),\n        ctx: Object.assign({}, param[0].ctx, { text })\n    };\n    return [c];\n}\nconst strictArgTypes = [\n    'number',\n    'date',\n    'time',\n    'spellout',\n    'ordinal',\n    'duration'\n];\nconst defaultPluralKeys = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Thrown by {@link parse} on error\n *\n * @public\n */\nclass ParseError extends Error {\n    /** @internal */\n    constructor(lt, msg) {\n        super(lexer_js_1.lexer.formatError(lt, msg));\n    }\n}\nexports.ParseError = ParseError;\nclass Parser {\n    constructor(src, opt) {\n        var _a, _b, _c, _d;\n        this.lexer = lexer_js_1.lexer.reset(src);\n        this.cardinalKeys = (_a = opt === null || opt === void 0 ? void 0 : opt.cardinal) !== null && _a !== void 0 ? _a : defaultPluralKeys;\n        this.ordinalKeys = (_b = opt === null || opt === void 0 ? void 0 : opt.ordinal) !== null && _b !== void 0 ? _b : defaultPluralKeys;\n        this.strict = (_c = opt === null || opt === void 0 ? void 0 : opt.strict) !== null && _c !== void 0 ? _c : false;\n        this.strictPluralKeys = (_d = opt === null || opt === void 0 ? void 0 : opt.strictPluralKeys) !== null && _d !== void 0 ? _d : true;\n    }\n    parse() {\n        return this.parseBody(false, true);\n    }\n    checkSelectKey(lt, type, key) {\n        if (key[0] === '=') {\n            if (type === 'select')\n                throw new ParseError(lt, `The case ${key} is not valid with select`);\n        }\n        else if (type !== 'select') {\n            const keys = type === 'plural' ? this.cardinalKeys : this.ordinalKeys;\n            if (this.strictPluralKeys && keys.length > 0 && !keys.includes(key)) {\n                const msg = `The ${type} case ${key} is not valid in this locale`;\n                throw new ParseError(lt, msg);\n            }\n        }\n    }\n    parseSelect({ value: arg }, inPlural, ctx, type) {\n        const sel = { type, arg, cases: [], ctx };\n        if (type === 'plural' || type === 'selectordinal')\n            inPlural = true;\n        else if (this.strict)\n            inPlural = false;\n        for (const lt of this.lexer) {\n            switch (lt.type) {\n                case 'offset':\n                    if (type === 'select')\n                        throw new ParseError(lt, 'Unexpected plural offset for select');\n                    if (sel.cases.length > 0)\n                        throw new ParseError(lt, 'Plural offset must be set before cases');\n                    sel.pluralOffset = Number(lt.value);\n                    ctx.text += lt.text;\n                    ctx.lineBreaks += lt.lineBreaks;\n                    break;\n                case 'case': {\n                    this.checkSelectKey(lt, type, lt.value);\n                    sel.cases.push({\n                        key: lt.value,\n                        tokens: this.parseBody(inPlural),\n                        ctx: getContext(lt)\n                    });\n                    break;\n                }\n                case 'end':\n                    return sel;\n                /* istanbul ignore next: never happens */\n                default:\n                    throw new ParseError(lt, `Unexpected lexer token: ${lt.type}`);\n            }\n        }\n        throw new ParseError(null, 'Unexpected message end');\n    }\n    parseArgToken(lt, inPlural) {\n        const ctx = getContext(lt);\n        const argType = this.lexer.next();\n        if (!argType)\n            throw new ParseError(null, 'Unexpected message end');\n        ctx.text += argType.text;\n        ctx.lineBreaks += argType.lineBreaks;\n        if (this.strict &&\n            (argType.type === 'func-simple' || argType.type === 'func-args') &&\n            !strictArgTypes.includes(argType.value)) {\n            const msg = `Invalid strict mode function arg type: ${argType.value}`;\n            throw new ParseError(lt, msg);\n        }\n        switch (argType.type) {\n            case 'end':\n                return { type: 'argument', arg: lt.value, ctx };\n            case 'func-simple': {\n                const end = this.lexer.next();\n                if (!end)\n                    throw new ParseError(null, 'Unexpected message end');\n                /* istanbul ignore if: never happens */\n                if (end.type !== 'end')\n                    throw new ParseError(end, `Unexpected lexer token: ${end.type}`);\n                ctx.text += end.text;\n                if (isSelectType(argType.value.toLowerCase()))\n                    throw new ParseError(argType, `Invalid type identifier: ${argType.value}`);\n                return {\n                    type: 'function',\n                    arg: lt.value,\n                    key: argType.value,\n                    ctx\n                };\n            }\n            case 'func-args': {\n                if (isSelectType(argType.value.toLowerCase())) {\n                    const msg = `Invalid type identifier: ${argType.value}`;\n                    throw new ParseError(argType, msg);\n                }\n                let param = this.parseBody(this.strict ? false : inPlural);\n                if (this.strict && param.length > 0)\n                    param = strictArgStyleParam(lt, param);\n                return {\n                    type: 'function',\n                    arg: lt.value,\n                    key: argType.value,\n                    param,\n                    ctx\n                };\n            }\n            case 'select':\n                /* istanbul ignore else: never happens */\n                if (isSelectType(argType.value))\n                    return this.parseSelect(lt, inPlural, ctx, argType.value);\n                else\n                    throw new ParseError(argType, `Unexpected select type ${argType.value}`);\n            /* istanbul ignore next: never happens */\n            default:\n                throw new ParseError(argType, `Unexpected lexer token: ${argType.type}`);\n        }\n    }\n    parseBody(inPlural, atRoot) {\n        const tokens = [];\n        let content = null;\n        for (const lt of this.lexer) {\n            if (lt.type === 'argument') {\n                if (content)\n                    content = null;\n                tokens.push(this.parseArgToken(lt, inPlural));\n            }\n            else if (lt.type === 'octothorpe' && inPlural) {\n                if (content)\n                    content = null;\n                tokens.push({ type: 'octothorpe', ctx: getContext(lt) });\n            }\n            else if (lt.type === 'end' && !atRoot) {\n                return tokens;\n            }\n            else {\n                let value = lt.value;\n                if (!inPlural && lt.type === 'quoted' && value[0] === '#') {\n                    if (value.includes('{')) {\n                        const errMsg = `Unsupported escape pattern: ${value}`;\n                        throw new ParseError(lt, errMsg);\n                    }\n                    value = lt.text;\n                }\n                if (content) {\n                    content.value += value;\n                    content.ctx.text += lt.text;\n                    content.ctx.lineBreaks += lt.lineBreaks;\n                }\n                else {\n                    content = { type: 'content', value, ctx: getContext(lt) };\n                    tokens.push(content);\n                }\n            }\n        }\n        if (atRoot)\n            return tokens;\n        throw new ParseError(null, 'Unexpected message end');\n    }\n}\n/**\n * Parse an input string into an array of tokens\n *\n * @public\n * @remarks\n * The parser only supports the default `DOUBLE_OPTIONAL`\n * {@link http://www.icu-project.org/apiref/icu4c/messagepattern_8h.html#af6e0757e0eb81c980b01ee5d68a9978b | apostrophe mode}.\n */\nfunction parse(src, options = {}) {\n    const parser = new Parser(src, options);\n    return parser.parse();\n}\nexports.parse = parse;\n", "import { Content, parse, Token } from \"@messageformat/parser\"\nimport { CompiledMessage, CompiledMessageToken } from \"../i18n\"\n\ntype MapTextFn = (value: string) => string\n\n// [Tokens] -> (CTX -> String)\nfunction processTokens(\n  tokens: Array<Token>,\n  mapText?: MapTextFn\n): CompiledMessage {\n  if (!tokens.filter((token) => token.type !== \"content\").length) {\n    return tokens.map((token) => mapText((token as Content).value)).join(\"\")\n  }\n\n  return tokens.map<CompiledMessageToken>((token) => {\n    if (token.type === \"content\") {\n      return mapText(token.value)\n\n      // # in plural case\n    } else if (token.type === \"octothorpe\") {\n      return \"#\"\n\n      // simple argument\n    } else if (token.type === \"argument\") {\n      return [token.arg]\n\n      // argument with custom format (date, number)\n    } else if (token.type === \"function\") {\n      const _param = token?.param?.[0] as Content\n\n      if (_param) {\n        return [token.arg, token.key, _param.value.trim()]\n      } else {\n        return [token.arg, token.key]\n      }\n    }\n\n    const offset = token.pluralOffset\n\n    // complex argument with cases\n    const formatProps = {}\n    token.cases.forEach((item) => {\n      formatProps[item.key.replace(/^=(.)+/, \"$1\")] = processTokens(\n        item.tokens,\n        mapText\n      )\n    })\n\n    return [\n      token.arg,\n      token.type,\n      {\n        offset,\n        ...formatProps,\n      } as any,\n    ] as CompiledMessageToken\n  })\n}\n\n// Message -> (Params -> String)\n/** @internal */\nexport function compileMessage(\n  message: string,\n  mapText: MapTextFn = (v) => v\n): CompiledMessage {\n  try {\n    return processTokens(parse(message), mapText)\n  } catch (e) {\n    console.error(`${e.message} \\n\\nMessage: ${message}`)\n    return message\n  }\n}\n", "export const isString = (s): s is string => typeof s === \"string\"\nexport const isFunction = (f): f is Function => typeof f === \"function\"\nexport function isEmpty(obj) {\n  // null and undefined are \"empty\"\n  if (obj === null || obj === undefined) return true\n\n  if (obj.length > 0) return false\n  if (obj.length === 0) return true\n\n  return !Object.getOwnPropertyNames(obj).length\n}\n", "import { isString } from \"./essentials\"\nimport { Locales } from \"./i18n\"\n\n/** Memoized cache */\nconst numberFormats = new Map<string, Intl.NumberFormat>()\nconst dateFormats = new Map<string, Intl.DateTimeFormat>()\n\nexport function date(\n  locales: Locales,\n  format: Intl.DateTimeFormatOptions = {},\n  memoize: boolean = true\n): (value: string | Date) => string {\n  return (value) => {\n    if (isString(value)) value = new Date(value)\n    if (memoize) {\n      const key = cacheKey<Intl.DateTimeFormatOptions>(locales, format)\n      const cachedFormatter = dateFormats.get(key)\n      if (cachedFormatter) {\n        return cachedFormatter.format(value)\n      }\n\n      const formatter = new Intl.DateTimeFormat(locales, format)\n      dateFormats.set(key, formatter)\n      return formatter.format(value)\n    }\n\n    const formatter = new Intl.DateTimeFormat(locales, format)\n    return formatter.format(value)\n  }\n}\n\nexport function number(\n  locales: Locales,\n  format: Intl.NumberFormatOptions = {},\n  memoize: boolean = true\n): (value: number) => string {\n  return (value) => {\n    if (memoize) {\n      const key = cacheKey<Intl.NumberFormatOptions>(locales, format)\n      const cachedFormatter = numberFormats.get(key)\n      if (cachedFormatter) {\n        return cachedFormatter.format(value)\n      }\n\n      const formatter = new Intl.NumberFormat(locales, format)\n      numberFormats.set(key, formatter)\n      return formatter.format(value)\n    }\n\n    const formatter = new Intl.NumberFormat(locales, format)\n    return formatter.format(value)\n  }\n}\n\n/** Memoize helpers */\nfunction cacheKey<T>(locales?: string | string[], options: T = {} as T) {\n  const localeKey = Array.isArray(locales) ? locales.sort().join(\"-\") : locales\n  return `${localeKey}-${JSON.stringify(options)}`\n}\n", "import { CompiledMessage, Formats, LocaleData, Locales, Values } from \"./i18n\"\nimport { date, number } from \"./formats\"\nimport { isString, isFunction } from \"./essentials\"\n\nexport const UNICODE_REGEX = /\\\\u[a-fA-F0-9]{4}|\\\\x[a-fA-F0-9]{2}/g\n\nconst defaultFormats = (\n  locale: string,\n  locales: Locales,\n  localeData: LocaleData = { plurals: undefined },\n  formats: Formats = {}\n) => {\n  locales = locales || locale\n  const { plurals } = localeData\n  const style = <T>(format: string | T): T =>\n    isString(format) ? formats[format] || { style: format } : (format as any)\n  const replaceOctothorpe = (value: number, message) => {\n    return (ctx) => {\n      const msg = isFunction(message) ? message(ctx) : message\n      const norm = Array.isArray(msg) ? msg : [msg]\n      const numberFormat = Object.keys(formats).length ? style(\"number\") : {}\n      const valueStr = number(locales, numberFormat)(value)\n      return norm.map((m) => (isString(m) ? m.replace(\"#\", valueStr) : m))\n    }\n  }\n\n  if (!plurals) {\n    console.error(\n      `Plurals for locale ${locale} aren't loaded. Use i18n.loadLocaleData method to load plurals for specific locale. Using other plural rule as a fallback.`\n    )\n  }\n\n  return {\n    plural: (value: number, { offset = 0, ...rules }) => {\n      const message =\n        rules[value] || rules[plurals?.(value - offset)] || rules.other\n\n      return replaceOctothorpe(value - offset, message)\n    },\n\n    selectordinal: (value: number, { offset = 0, ...rules }) => {\n      const message =\n        rules[value] || rules[plurals?.(value - offset, true)] || rules.other\n      return replaceOctothorpe(value - offset, message)\n    },\n\n    select: (value: string, rules) => rules[value] || rules.other,\n\n    number: (value: number, format: string | Intl.NumberFormatOptions) =>\n      number(locales, style(format))(value),\n\n    date: (value: string, format: string | Intl.DateTimeFormatOptions) =>\n      date(locales, style(format))(value),\n\n    undefined: (value: unknown) => value,\n  }\n}\n\n// Params -> CTX\n/**\n * Creates a context object, which formats ICU MessageFormat arguments based on\n * argument type.\n *\n * @param locale     - Locale of message\n * @param locales      - Locales to be used when formatting the numbers or dates\n * @param values       - Parameters for variable interpolation\n * @param localeData - Locale data (e.g: plurals)\n * @param formats - Custom format styles\n * @returns {function(string, string, any)}\n */\nfunction context(\n  locale: string,\n  locales: Locales,\n  values: Values,\n  formats: Formats,\n  localeData: LocaleData\n) {\n  const formatters = defaultFormats(locale, locales, localeData, formats)\n\n  const ctx = (name: string, type: string, format: any): string => {\n    const value = values[name]\n    const formatted = formatters[type](value, format)\n    const message = isFunction(formatted) ? formatted(ctx) : formatted\n    return Array.isArray(message) ? message.join(\"\") : message\n  }\n\n  return ctx\n}\n\nexport function interpolate(\n  translation: CompiledMessage,\n  locale: string,\n  locales: Locales,\n  localeData: LocaleData\n) {\n  return (values: Values, formats: Formats = {}): string => {\n    const ctx = context(locale, locales, values, formats, localeData)\n\n    const formatMessage = (message: CompiledMessage): string => {\n      if (!Array.isArray(message)) return message\n\n      return message.reduce<string>((message, token) => {\n        if (isString(token)) return message + token\n\n        const [name, type, format] = token\n\n        let interpolatedFormat = {}\n        if (format != null && !isString(format)) {\n          Object.keys(format).forEach((key) => {\n            interpolatedFormat[key] = formatMessage(format[key])\n          })\n        } else {\n          interpolatedFormat = format\n        }\n\n        const value = ctx(name, type, interpolatedFormat)\n        if (value == null) return message\n\n        return message + value\n      }, \"\")\n    }\n\n    const result = formatMessage(translation)\n    if (isString(result) && UNICODE_REGEX.test(result))\n      return JSON.parse(`\"${result.trim()}\"`)\n    if (isString(result)) return result.trim()\n    return result\n  }\n}\n", "export class EventEmitter<\n  Events extends { [name: string]: (...args: any[]) => any }\n> {\n  private readonly _events: {\n    [name in keyof Events]?: Array<Events[name]>\n  } = {}\n\n  on(event: keyof Events, listener: Events[typeof event]): () => void {\n    if (!this._hasEvent(event)) this._events[event] = []\n\n    this._events[event].push(listener)\n    return () => this.removeListener(event, listener)\n  }\n\n  removeListener(event: keyof Events, listener: Events[typeof event]): void {\n    if (!this._hasEvent(event)) return\n\n    const index = this._events[event].indexOf(listener)\n    if (~index) this._events[event].splice(index, 1)\n  }\n\n  emit(event: keyof Events, ...args: Parameters<Events[typeof event]>): void {\n    if (!this._hasEvent(event)) return\n\n    this._events[event].map((listener) => listener.apply(this, args))\n  }\n\n  private _hasEvent(event: keyof Events) {\n    return Array.isArray(this._events[event])\n  }\n}\n", "import { interpolate, UNICODE_REGEX } from \"./context\"\nimport { isString, isFunction } from \"./essentials\"\nimport { date, number } from \"./formats\"\nimport { compileMessage } from \"@lingui/core/compile\"\nimport { EventEmitter } from \"./eventEmitter\"\nimport type { PluralCategory } from \"make-plural\"\n\nexport type MessageOptions = {\n  message?: string\n  context?: string\n  formats?: Formats\n}\n\nexport type Locale = string\nexport type Locales = Locale | Locale[]\nexport type Formats = Record<\n  string,\n  Intl.DateTimeFormatOptions | Intl.NumberFormatOptions\n>\n\nexport type Values = Record<string, unknown>\n\nexport type LocaleData = {\n  plurals?: (n: number, ordinal?: boolean) => PluralCategory\n}\n\nexport type AllLocaleData = Record<Locale, LocaleData>\n\nexport type CompiledIcuChoices = Record<string, CompiledMessage> & {\n  offset: number\n}\nexport type CompiledMessageToken =\n  | string\n  | [name: string, type?: string, format?: null | string | CompiledIcuChoices]\n\nexport type CompiledMessage = string | CompiledMessageToken[]\n\nexport type Messages = Record<string, CompiledMessage>\n\nexport type AllMessages = Record<Locale, Messages>\n\nexport type MessageDescriptor = {\n  id?: string\n  comment?: string\n  message?: string\n  context?: string\n  values?: Record<string, unknown>\n}\n\nexport type MissingMessageEvent = {\n  locale: Locale\n  id: string\n  context?: string\n}\n\ntype MissingHandler =\n  | string\n  | ((locale: string, id: string, context: string) => string)\n\ntype setupI18nProps = {\n  locale?: Locale\n  locales?: Locales\n  messages?: AllMessages\n  localeData?: AllLocaleData\n  missing?: MissingHandler\n}\n\ntype Events = {\n  change: () => void\n  missing: (event: MissingMessageEvent) => void\n}\n\nexport class I18n extends EventEmitter<Events> {\n  private _locale: Locale\n  private _locales: Locales\n  private _localeData: AllLocaleData\n  private _messages: AllMessages\n  private _missing: MissingHandler\n\n  constructor(params: setupI18nProps) {\n    super()\n\n    this._messages = {}\n    this._localeData = {}\n\n    if (params.missing != null) this._missing = params.missing\n    if (params.messages != null) this.load(params.messages)\n    if (params.localeData != null) this.loadLocaleData(params.localeData)\n    if (params.locale != null || params.locales != null) {\n      this.activate(params.locale, params.locales)\n    }\n  }\n\n  get locale() {\n    return this._locale\n  }\n\n  get locales() {\n    return this._locales\n  }\n\n  get messages(): Messages {\n    return this._messages[this._locale] ?? {}\n  }\n\n  get localeData(): LocaleData {\n    return this._localeData[this._locale] ?? {}\n  }\n\n  private _loadLocaleData(locale: Locale, localeData: LocaleData) {\n    if (this._localeData[locale] == null) {\n      this._localeData[locale] = localeData\n    } else {\n      Object.assign(this._localeData[locale], localeData)\n    }\n  }\n\n  public loadLocaleData(allLocaleData: AllLocaleData): void\n  public loadLocaleData(locale: Locale, localeData: LocaleData): void\n\n  loadLocaleData(localeOrAllData, localeData?) {\n    if (localeData != null) {\n      // loadLocaleData('en', enLocaleData)\n      // Loading locale data for a single locale.\n      this._loadLocaleData(localeOrAllData, localeData)\n    } else {\n      // loadLocaleData(allLocaleData)\n      // Loading all locale data at once.\n      Object.keys(localeOrAllData).forEach((locale) =>\n        this._loadLocaleData(locale, localeOrAllData[locale])\n      )\n    }\n\n    this.emit(\"change\")\n  }\n\n  private _load(locale: Locale, messages: Messages) {\n    if (this._messages[locale] == null) {\n      this._messages[locale] = messages\n    } else {\n      Object.assign(this._messages[locale], messages)\n    }\n  }\n\n  public load(allMessages: AllMessages): void\n  public load(locale: Locale, messages: Messages): void\n\n  load(localeOrMessages, messages?) {\n    if (messages != null) {\n      // load('en', catalog)\n      // Loading a catalog for a single locale.\n      this._load(localeOrMessages, messages)\n    } else {\n      // load(catalogs)\n      // Loading several locales at once.\n      Object.keys(localeOrMessages).forEach((locale) =>\n        this._load(locale, localeOrMessages[locale])\n      )\n    }\n\n    this.emit(\"change\")\n  }\n\n  activate(locale: Locale, locales?: Locales) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!this._messages[locale]) {\n        console.warn(`Messages for locale \"${locale}\" not loaded.`)\n      }\n\n      if (!this._localeData[locale]) {\n        console.warn(\n          `Locale data for locale \"${locale}\" not loaded. Plurals won't work correctly.`\n        )\n      }\n    }\n\n    this._locale = locale\n    this._locales = locales\n    this.emit(\"change\")\n  }\n\n  // method for translation and formatting\n  _(\n    id: MessageDescriptor | string,\n    values: Values | undefined = {},\n    { message, formats, context }: MessageOptions | undefined = {}\n  ) {\n    if (!isString(id)) {\n      values = id.values || values\n      message = id.message\n      context = id.context\n      id = id.id\n    }\n\n    const messageMissing = !context && !this.messages[id]\n    const contextualMessageMissing = context && !this.messages[context][id]\n    const messageUnreachable = contextualMessageMissing || messageMissing\n\n    // replace missing messages with custom message for debugging\n    const missing = this._missing\n    if (missing && messageUnreachable) {\n      return isFunction(missing) ? missing(this._locale, id, context) : missing\n    }\n\n    if (messageUnreachable) {\n      this.emit(\"missing\", { id, context, locale: this._locale })\n    }\n\n    let translation\n\n    if (context && !contextualMessageMissing) {\n      // context is like a subdirectory of other keys\n      translation = this.messages[context][id] || message || id\n    } else {\n      translation = this.messages[id] || message || id\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      translation = isString(translation)\n        ? compileMessage(translation)\n        : translation\n    }\n\n    // hack for parsing unicode values inside a string to get parsed in react native environments\n    if (isString(translation) && UNICODE_REGEX.test(translation))\n      return JSON.parse(`\"${translation}\"`) as string\n    if (isString(translation)) return translation\n\n    return interpolate(\n      translation,\n      this._locale,\n      this._locales,\n      this.localeData\n    )(values, formats)\n  }\n\n  date(value: string | Date, format?: Intl.DateTimeFormatOptions): string {\n    return date(this._locales || this._locale, format)(value)\n  }\n\n  number(value: number, format?: Intl.NumberFormatOptions): string {\n    return number(this._locales || this._locale, format)(value)\n  }\n}\n\nfunction setupI18n(params: setupI18nProps = {}): I18n {\n  return new I18n(params)\n}\n\nexport { setupI18n }\n", "export { setupI18n, I18n } from \"./i18n\"\n\nexport type {\n  AllMessages,\n  MessageDescriptor,\n  Messages,\n  AllLocaleData,\n  LocaleData,\n  Locale,\n  Locales,\n} from \"./i18n\"\n\n// Default i18n object\nimport { setupI18n } from \"./i18n\"\nexport const i18n = setupI18n()\n\nimport * as formats from \"./formats\"\nexport { formats }\n"],
  "mappings": "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",
  "names": ["parse", "processTokens", "tokens", "mapText", "filter", "token", "type", "length", "map", "value", "join", "arg", "_param", "param", "key", "trim", "offset", "pluralOffset", "formatProps", "cases", "forEach", "item", "replace", "compileMessage", "message", "v", "parse", "e", "console", "error", "isString", "s", "isFunction", "f", "numberFormats", "Map", "dateFormats", "date", "locales", "format", "memoize", "value", "Date", "key", "cacheKey", "cachedFormatter", "get", "formatter", "Intl", "DateTimeFormat", "set", "number", "NumberFormat", "options", "localeKey", "Array", "isArray", "sort", "join", "JSON", "stringify", "UNICODE_REGEX", "defaultFormats", "locale", "localeData", "plurals", "undefined", "formats", "style", "replaceOctothorpe", "message", "ctx", "msg", "norm", "numberFormat", "Object", "keys", "length", "valueStr", "map", "m", "replace", "console", "error", "plural", "offset", "rules", "other", "selectordinal", "select", "context", "values", "formatters", "name", "type", "formatted", "interpolate", "translation", "formatMessage", "reduce", "token", "interpolatedFormat", "forEach", "result", "test", "parse", "trim", "EventEmitter", "_events", "on", "event", "listener", "_hasEvent", "push", "removeListener", "index", "indexOf", "splice", "emit", "args", "apply", "I18n", "constructor", "params", "_messages", "_localeData", "missing", "_missing", "messages", "load", "loadLocaleData", "activate", "_locale", "_locales", "_loadLocaleData", "assign", "localeOrAllData", "_load", "localeOrMessages", "process", "warn", "_", "id", "messageMissing", "contextualMessageMissing", "messageUnreachable", "compileMessage", "setupI18n", "i18n"]
}
