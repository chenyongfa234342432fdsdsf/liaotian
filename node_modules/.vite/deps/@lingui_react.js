import {
  _extends
} from "./chunk-55MF5RMJ.js";
import {
  require_react
} from "./chunk-VMW3HQP3.js";
import {
  __toESM
} from "./chunk-Y7S7B2N7.js";

// node_modules/.pnpm/@lingui+react@3.17.2_react@18.2.0/node_modules/@lingui/react/build/esm/index.js
var import_react = __toESM(require_react());
var LinguiContext = import_react.default.createContext(null);
function useLingui() {
  const context = import_react.default.useContext(LinguiContext);
  if (true) {
    if (context == null) {
      throw new Error("useLingui hook was used without I18nProvider.");
    }
  }
  return context;
}
function withI18n(o) {
  return (WrappedComponent) => {
    return (props) => {
      if (true) {
        if (typeof o === "function" || import_react.default.isValidElement(o)) {
          throw new Error("withI18n([options]) takes options as a first argument, but received React component itself. Without options, the Component should be wrapped as withI18n()(Component), not withI18n(Component).");
        }
      }
      const {
        i18n
      } = useLingui();
      return import_react.default.createElement(WrappedComponent, _extends({}, props, {
        i18n
      }));
    };
  };
}
var I18nProvider = (_ref) => {
  let {
    i18n,
    defaultComponent,
    forceRenderOnLocaleChange = true,
    children
  } = _ref;
  const makeContext = () => ({
    i18n,
    defaultComponent
  });
  const getRenderKey = () => {
    return forceRenderOnLocaleChange ? i18n.locale || "default" : "default";
  };
  const [context, setContext] = import_react.default.useState(makeContext()), [renderKey, setRenderKey] = import_react.default.useState(getRenderKey());
  import_react.default.useEffect(() => {
    const unsubscribe = i18n.on("change", () => {
      setContext(makeContext());
      setRenderKey(getRenderKey());
    });
    if (renderKey === "default") {
      setRenderKey(getRenderKey());
    }
    if (forceRenderOnLocaleChange && renderKey === "default") {
      console.log("I18nProvider did not render. A call to i18n.activate still needs to happen or forceRenderOnLocaleChange must be set to false.");
    }
    return () => unsubscribe();
  }, []);
  if (forceRenderOnLocaleChange && renderKey === "default")
    return null;
  return import_react.default.createElement(LinguiContext.Provider, {
    value: context,
    key: renderKey
  }, children);
};
var tagRe = /<([a-zA-Z0-9]+)>(.*?)<\/\1>|<([a-zA-Z0-9]+)\/>/;
var nlRe = /(?:\r\n|\r|\n)/g;
var voidElementTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
  menuitem: true
};
function formatElements(value) {
  let elements = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const uniqueId = makeCounter(0, "$lingui$");
  const parts = value.replace(nlRe, "").split(tagRe);
  if (parts.length === 1)
    return value;
  const tree = [];
  const before = parts.shift();
  if (before)
    tree.push(before);
  for (const [index, children, after] of getElements(parts)) {
    let element = elements[index];
    if (!element || voidElementTags[element.type] && children) {
      if (!element) {
        console.error(`Can use element at index '${index}' as it is not declared in the original translation`);
      } else {
        console.error(`${element.type} is a void element tag therefore it must have no children`);
      }
      element = import_react.default.createElement(import_react.default.Fragment);
    }
    tree.push(import_react.default.cloneElement(
      element,
      {
        key: uniqueId()
      },
      // format children for pair tags
      // unpaired tags might have children if it's a component passed as a variable
      children ? formatElements(children, elements) : element.props.children
    ));
    if (after)
      tree.push(after);
  }
  return tree;
}
function getElements(parts) {
  if (!parts.length)
    return [];
  const [paired, children, unpaired, after] = parts.slice(0, 4);
  return [[paired || unpaired, children || "", after]].concat(getElements(parts.slice(4, parts.length)));
}
var makeCounter = function() {
  let count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  return () => `${prefix}_${count++}`;
};
function Trans(props) {
  const {
    i18n,
    defaultComponent
  } = useLingui();
  const {
    render,
    component,
    id,
    message,
    formats
  } = props;
  const values = {
    ...props.values
  };
  const components = {
    ...props.components
  };
  if (values) {
    Object.keys(values).forEach((key) => {
      const value = values[key];
      if (!import_react.default.isValidElement(value))
        return;
      const index = Object.keys(components).length;
      components[index] = value;
      values[key] = `<${index}/>`;
    });
  }
  const _translation = i18n && typeof i18n._ === "function" ? i18n._(id, values, {
    message,
    formats
  }) : id;
  const translation = _translation ? formatElements(_translation, components) : null;
  if (render === null || component === null) {
    return translation;
  }
  const FallbackComponent = defaultComponent || import_react.default.Fragment;
  const i18nProps = {
    id,
    message,
    translation,
    isTranslated: id !== translation && message !== translation
  };
  if (render && component) {
    console.error("You can't use both `component` and `render` prop at the same time. `component` is ignored.");
  } else if (render && typeof render !== "function") {
    console.error(`Invalid value supplied to prop \`render\`. It must be a function, provided ${render}`);
  } else if (component && typeof component !== "function") {
    console.error(`Invalid value supplied to prop \`component\`. It must be a React component, provided ${component}`);
    return import_react.default.createElement(FallbackComponent, i18nProps, translation);
  }
  if (typeof render === "function") {
    return render(i18nProps);
  }
  const Component = component || FallbackComponent;
  const DefaultComponent = defaultComponent;
  return DefaultComponent && !component ? import_react.default.createElement(DefaultComponent, i18nProps, translation) : import_react.default.createElement(Component, null, translation);
}
Trans.defaultProps = {
  values: {},
  components: {}
};
export {
  I18nProvider,
  Trans,
  useLingui,
  withI18n
};
//# sourceMappingURL=@lingui_react.js.map
