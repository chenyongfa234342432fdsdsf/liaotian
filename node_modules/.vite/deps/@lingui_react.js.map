{
  "version": 3,
  "sources": ["../../.pnpm/@lingui+react@3.17.2_react@18.2.0/node_modules/@lingui/react/src/I18nProvider.tsx", "../../.pnpm/@lingui+react@3.17.2_react@18.2.0/node_modules/@lingui/react/src/format.ts", "../../.pnpm/@lingui+react@3.17.2_react@18.2.0/node_modules/@lingui/react/src/Trans.tsx"],
  "sourcesContent": ["import React, { ComponentType, FunctionComponent } from \"react\"\nimport { I18n } from \"@lingui/core\"\nimport { TransRenderProps } from \"./Trans\"\n\nexport type I18nContext = {\n  i18n: I18n\n  defaultComponent?: ComponentType<TransRenderProps>\n}\n\nexport type withI18nProps = {\n  i18n: I18n\n}\n\nexport type I18nProviderProps = I18nContext & {\n  forceRenderOnLocaleChange?: boolean\n  children?: React.ReactNode\n}\n\nconst LinguiContext = React.createContext<I18nContext>(null)\n\nexport function useLingui(): I18nContext {\n  const context = React.useContext<I18nContext>(LinguiContext)\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (context == null) {\n      throw new Error(\"useLingui hook was used without I18nProvider.\")\n    }\n  }\n\n  return context\n}\n\nexport function withI18n(\n  o?: object\n): <P extends withI18nProps>(\n  Component: ComponentType<P>\n) => React.ComponentType<Omit<P, \"i18n\">> {\n  return <P extends withI18nProps>(\n    WrappedComponent: ComponentType<P>\n  ): ComponentType<P> => {\n    return (props) => {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (typeof o === \"function\" || React.isValidElement(o)) {\n          throw new Error(\n            \"withI18n([options]) takes options as a first argument, \" +\n              \"but received React component itself. Without options, the Component \" +\n              \"should be wrapped as withI18n()(Component), not withI18n(Component).\"\n          )\n        }\n      }\n\n      const { i18n } = useLingui()\n      return <WrappedComponent {...props} i18n={i18n} />\n    }\n  }\n}\n\nexport const I18nProvider: FunctionComponent<I18nProviderProps> = ({\n  i18n,\n  defaultComponent,\n  forceRenderOnLocaleChange = true,\n  children,\n}) => {\n  /**\n   * We can't pass `i18n` object directly through context, because even when locale\n   * or messages are changed, i18n object is still the same. Context provider compares\n   * reference identity and suggested workaround is create a wrapper object every time\n   * we need to trigger re-render. See https://reactjs.org/docs/context.html#caveats.\n   *\n   * Due to this effect we also pass `defaultComponent` in the same context, instead\n   * of creating a separate Provider/Consumer pair.\n   *\n   * We can't use useMemo hook either, because we want to recalculate value manually.\n   */\n  const makeContext = () => ({\n    i18n,\n    defaultComponent,\n  })\n  const getRenderKey = () => {\n    return (\n      forceRenderOnLocaleChange ? i18n.locale || \"default\" : \"default\"\n    ) as string\n  }\n\n  const [context, setContext] = React.useState<I18nContext>(makeContext()),\n    [renderKey, setRenderKey] = React.useState<string>(getRenderKey())\n\n  /**\n   * Subscribe for locale/message changes\n   *\n   * I18n object from `@lingui/core` is the single source of truth for all i18n related\n   * data (active locale, catalogs). When new messages are loaded or locale is changed\n   * we need to trigger re-rendering of LinguiContext.Consumers.\n   *\n   * We call `setContext(makeContext())` after adding the observer in case the `change`\n   * event would already have fired between the inital renderKey calculation and the\n   * `useEffect` hook being called. This can happen if locales are loaded/activated\n   * async.\n   */\n  React.useEffect(() => {\n    const unsubscribe = i18n.on(\"change\", () => {\n      setContext(makeContext())\n      setRenderKey(getRenderKey())\n    })\n    if (renderKey === \"default\") {\n      setRenderKey(getRenderKey())\n    }\n    if (forceRenderOnLocaleChange && renderKey === \"default\") {\n      console.log(\n        \"I18nProvider did not render. A call to i18n.activate still needs to happen or forceRenderOnLocaleChange must be set to false.\"\n      )\n    }\n    return () => unsubscribe()\n  }, [])\n\n  if (forceRenderOnLocaleChange && renderKey === \"default\") return null\n\n  return (\n    <LinguiContext.Provider value={context} key={renderKey}>\n      {children}\n    </LinguiContext.Provider>\n  )\n}\n", "import React from \"react\"\n\n// match <tag>paired</tag> and <tag/> unpaired tags\nconst tagRe = /<([a-zA-Z0-9]+)>(.*?)<\\/\\1>|<([a-zA-Z0-9]+)\\/>/\nconst nlRe = /(?:\\r\\n|\\r|\\n)/g\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\nconst voidElementTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n  menuitem: true,\n}\n\n/**\n * `formatElements` - parse string and return tree of react elements\n *\n * `value` is string to be formatted with <tag>Paired<tag/> or <tag/> (unpaired)\n * placeholders. `elements` is a array of react elements which indexes\n * correspond to element indexes in formatted string\n */\nfunction formatElements(\n  value: string,\n  elements: { [key: string]: React.ReactElement<any> } = {}\n): string | Array<any> {\n  const uniqueId = makeCounter(0, \"$lingui$\")\n  const parts = value.replace(nlRe, \"\").split(tagRe)\n\n  // no inline elements, return\n  if (parts.length === 1) return value\n\n  const tree = []\n\n  const before = parts.shift()\n  if (before) tree.push(before)\n\n  for (const [index, children, after] of getElements(parts)) {\n    let element = elements[index]\n\n    if (!element || (voidElementTags[element.type as string] && children)) {\n      if (!element) {\n        console.error(\n          `Can use element at index '${index}' as it is not declared in the original translation`\n        )\n      } else {\n        console.error(\n          `${element.type} is a void element tag therefore it must have no children`\n        )\n      }\n\n      // ignore problematic element but push its children and elements after it\n      element = React.createElement(React.Fragment)\n    }\n\n    tree.push(\n      React.cloneElement(\n        element,\n        { key: uniqueId() },\n\n        // format children for pair tags\n        // unpaired tags might have children if it's a component passed as a variable\n        children ? formatElements(children, elements) : element.props.children\n      )\n    )\n\n    if (after) tree.push(after)\n  }\n\n  return tree\n}\n\n/*\n * `getElements` - return array of element indexes and element childrens\n *\n * `parts` is array of [pairedIndex, children, unpairedIndex, textAfter, ...]\n * where:\n * - `pairedIndex` is index of paired element (undef for unpaired)\n * - `children` are children of paired element (undef for unpaired)\n * - `unpairedIndex` is index of unpaired element (undef for paired)\n * - `textAfter` is string after all elements (empty string, if there's nothing)\n *\n * `parts` length is always multiply of 4\n *\n * Returns: Array<[elementIndex, children, after]>\n */\nfunction getElements(parts) {\n  if (!parts.length) return []\n\n  const [paired, children, unpaired, after] = parts.slice(0, 4)\n\n  return [[paired || unpaired, children || \"\", after]].concat(\n    getElements(parts.slice(4, parts.length))\n  )\n}\n\nconst makeCounter =\n  (count = 0, prefix = \"\") =>\n  () =>\n    `${prefix}_${count++}`\n\nexport { formatElements }\n", "import React from \"react\"\n\nimport { useLingui } from \"./I18nProvider\"\nimport { formatElements } from \"./format\"\n\nexport type TransRenderProps = {\n  id?: string\n  translation?: React.ReactNode\n  children?: React.ReactNode\n  message?: string | null\n  isTranslated?: boolean\n}\n\nexport type TransProps = {\n  id: string\n  message?: string\n  values: Record<string, unknown>\n  context?: string\n  components: { [key: string]: React.ElementType | any }\n  formats?: Record<string, unknown>\n  children?: React.ReactNode\n  component?: React.ComponentType<TransRenderProps>\n  render?: (props: TransRenderProps) => React.ReactElement<any, any> | null\n}\n\nexport function Trans(props: TransProps): React.ReactElement<any, any> | null {\n  const { i18n, defaultComponent } = useLingui()\n  const { render, component, id, message, formats } = props\n\n  const values = { ...props.values }\n  const components = { ...props.components }\n\n  if (values) {\n    /*\n      Related discussion: https://github.com/lingui/js-lingui/issues/183\n\n      Values *might* contain React elements with static content.\n      They're replaced with <INDEX /> placeholders and added to `components`.\n\n      Example:\n      Translation: Hello {name}\n      Values: { name: <strong>Jane</strong> }\n\n      It'll become \"Hello <0 />\" with components=[<strong>Jane</strong>]\n      */\n\n    Object.keys(values).forEach((key) => {\n      const value = values[key]\n      if (!React.isValidElement(value)) return\n\n      const index = Object.keys(components).length\n\n      components[index] = value\n      values[key] = `<${index}/>`\n    })\n  }\n\n  const _translation: string =\n    i18n && typeof i18n._ === \"function\"\n      ? i18n._(id, values, { message, formats })\n      : id // i18n provider isn't loaded at all\n\n  const translation = _translation\n    ? formatElements(_translation, components)\n    : null\n\n  if (render === null || component === null) {\n    // Although `string` is a valid react element, types only allow `Element`\n    // Upstream issue: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return translation as unknown as React.ReactElement<any, any>\n  }\n\n  const FallbackComponent = (defaultComponent ||\n    React.Fragment) as React.ComponentType<any>\n\n  const i18nProps = {\n    id,\n    message,\n    translation,\n    isTranslated: id !== translation && message !== translation,\n  }\n\n  // Validation of `render` and `component` props\n  if (render && component) {\n    console.error(\n      \"You can't use both `component` and `render` prop at the same time. `component` is ignored.\"\n    )\n  } else if (render && typeof render !== \"function\") {\n    console.error(\n      `Invalid value supplied to prop \\`render\\`. It must be a function, provided ${render}`\n    )\n  } else if (component && typeof component !== \"function\") {\n    // Apparently, both function components and class components are functions\n    // See https://stackoverflow.com/a/41658173/1535540\n    console.error(\n      `Invalid value supplied to prop \\`component\\`. It must be a React component, provided ${component}`\n    )\n    return <FallbackComponent {...i18nProps}>{translation}</FallbackComponent>\n  }\n\n  // Rendering using a render prop\n  if (typeof render === \"function\") {\n    // Component: render={(props) => <a title={props.translation}>x</a>}\n    return render(i18nProps)\n  }\n\n  // `component` prop has a higher precedence over `defaultComponent`\n  const Component = (component || FallbackComponent) as React.ComponentType<any>\n  const DefaultComponent = defaultComponent\n\n  return DefaultComponent && !component ? (\n    <DefaultComponent {...i18nProps}>{translation}</DefaultComponent>\n  ) : (\n    <Component>{translation}</Component>\n  )\n}\n\nTrans.defaultProps = {\n  values: {},\n  components: {},\n}\n"],
  "mappings": "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",
  "names": ["LinguiContext", "React", "createContext", "useLingui", "context", "useContext", "process", "Error", "withI18n", "o", "WrappedComponent", "props", "isValidElement", "i18n", "I18nProvider", "defaultComponent", "forceRenderOnLocaleChange", "children", "makeContext", "getRenderKey", "locale", "setContext", "useState", "renderKey", "setRenderKey", "useEffect", "unsubscribe", "on", "console", "log", "tagRe", "nlRe", "voidElementTags", "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr", "menuitem", "formatElements", "value", "elements", "uniqueId", "makeCounter", "parts", "replace", "split", "length", "tree", "before", "shift", "push", "index", "after", "getElements", "element", "type", "error", "createElement", "Fragment", "cloneElement", "key", "paired", "unpaired", "slice", "concat", "count", "prefix", "Trans", "render", "component", "id", "message", "formats", "values", "components", "Object", "keys", "forEach", "_translation", "_", "translation", "FallbackComponent", "i18nProps", "isTranslated", "Component", "DefaultComponent", "defaultProps"]
}
