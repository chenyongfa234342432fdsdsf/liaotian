import {
  a as a2,
  m,
  u
} from "./chunk-YAGD63NB.js";
import {
  a,
  e
} from "./chunk-KQG23UDY.js";

// node_modules/.pnpm/@tauri-apps+api@1.5.1/node_modules/@tauri-apps/api/chunk-O3VGRXBA.js
var S = {};
e(S, { CloseRequestedEvent: () => y, LogicalPosition: () => c, LogicalSize: () => m2, PhysicalPosition: () => r, PhysicalSize: () => o, UserAttentionType: () => W, WebviewWindow: () => s, WebviewWindowHandle: () => u2, WindowManager: () => b, appWindow: () => g, availableMonitors: () => D, currentMonitor: () => C, getAll: () => h, getCurrent: () => E, primaryMonitor: () => T });
var m2 = class {
  constructor(e2, a3) {
    this.type = "Logical";
    this.width = e2, this.height = a3;
  }
};
var o = class {
  constructor(e2, a3) {
    this.type = "Physical";
    this.width = e2, this.height = a3;
  }
  toLogical(e2) {
    return new m2(this.width / e2, this.height / e2);
  }
};
var c = class {
  constructor(e2, a3) {
    this.type = "Logical";
    this.x = e2, this.y = a3;
  }
};
var r = class {
  constructor(e2, a3) {
    this.type = "Physical";
    this.x = e2, this.y = a3;
  }
  toLogical(e2) {
    return new c(this.x / e2, this.y / e2);
  }
};
var W = ((a3) => (a3[a3.Critical = 1] = "Critical", a3[a3.Informational = 2] = "Informational", a3))(W || {});
function E() {
  return new s(window.__TAURI_METADATA__.__currentWindow.label, { skip: true });
}
function h() {
  return window.__TAURI_METADATA__.__windows.map((t) => new s(t.label, { skip: true }));
}
var M = ["tauri://created", "tauri://error"];
var u2 = class {
  constructor(e2) {
    this.label = e2, this.listeners = /* @__PURE__ */ Object.create(null);
  }
  async listen(e2, a3) {
    return this._handleTauriEvent(e2, a3) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a3), 1);
    }) : a2(e2, this.label, a3);
  }
  async once(e2, a3) {
    return this._handleTauriEvent(e2, a3) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a3), 1);
    }) : u(e2, this.label, a3);
  }
  async emit(e2, a3) {
    if (M.includes(e2)) {
      for (let n of this.listeners[e2] || [])
        n({ event: e2, id: -1, windowLabel: this.label, payload: a3 });
      return Promise.resolve();
    }
    return m(e2, this.label, a3);
  }
  _handleTauriEvent(e2, a3) {
    return M.includes(e2) ? (e2 in this.listeners ? this.listeners[e2].push(a3) : this.listeners[e2] = [a3], true) : false;
  }
};
var b = class extends u2 {
  async scaleFactor() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "scaleFactor" } } } });
  }
  async innerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerPosition" } } } }).then(({ x: e2, y: a3 }) => new r(e2, a3));
  }
  async outerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerPosition" } } } }).then(({ x: e2, y: a3 }) => new r(e2, a3));
  }
  async innerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerSize" } } } }).then(({ width: e2, height: a3 }) => new o(e2, a3));
  }
  async outerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerSize" } } } }).then(({ width: e2, height: a3 }) => new o(e2, a3));
  }
  async isFullscreen() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFullscreen" } } } });
  }
  async isMinimized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMinimized" } } } });
  }
  async isMaximized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximized" } } } });
  }
  async isFocused() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFocused" } } } });
  }
  async isDecorated() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isDecorated" } } } });
  }
  async isResizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isResizable" } } } });
  }
  async isMaximizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximizable" } } } });
  }
  async isMinimizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMinimizable" } } } });
  }
  async isClosable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isClosable" } } } });
  }
  async isVisible() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isVisible" } } } });
  }
  async title() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "title" } } } });
  }
  async theme() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "theme" } } } });
  }
  async center() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "center" } } } });
  }
  async requestUserAttention(e2) {
    let a3 = null;
    return e2 && (e2 === 1 ? a3 = { type: "Critical" } : a3 = { type: "Informational" }), a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "requestUserAttention", payload: a3 } } } });
  }
  async setResizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setResizable", payload: e2 } } } });
  }
  async setMaximizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaximizable", payload: e2 } } } });
  }
  async setMinimizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinimizable", payload: e2 } } } });
  }
  async setClosable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setClosable", payload: e2 } } } });
  }
  async setTitle(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setTitle", payload: e2 } } } });
  }
  async maximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "maximize" } } } });
  }
  async unmaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unmaximize" } } } });
  }
  async toggleMaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "toggleMaximize" } } } });
  }
  async minimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "minimize" } } } });
  }
  async unminimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unminimize" } } } });
  }
  async show() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "show" } } } });
  }
  async hide() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "hide" } } } });
  }
  async close() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "close" } } } });
  }
  async setDecorations(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setDecorations", payload: e2 } } } });
  }
  async setAlwaysOnTop(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setAlwaysOnTop", payload: e2 } } } });
  }
  async setContentProtected(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setContentProtected", payload: e2 } } } });
  }
  async setSize(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSize", payload: { type: e2.type, data: { width: e2.width, height: e2.height } } } } } });
  }
  async setMinSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setMaxSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaxSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setFullscreen(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFullscreen", payload: e2 } } } });
  }
  async setFocus() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFocus" } } } });
  }
  async setIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIcon", payload: { icon: typeof e2 == "string" ? e2 : Array.from(e2) } } } } });
  }
  async setSkipTaskbar(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSkipTaskbar", payload: e2 } } } });
  }
  async setCursorGrab(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorGrab", payload: e2 } } } });
  }
  async setCursorVisible(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorVisible", payload: e2 } } } });
  }
  async setCursorIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorIcon", payload: e2 } } } });
  }
  async setCursorPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setIgnoreCursorEvents(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIgnoreCursorEvents", payload: e2 } } } });
  }
  async startDragging() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "startDragging" } } } });
  }
  async onResized(e2) {
    return this.listen("tauri://resize", (a3) => {
      a3.payload = f(a3.payload), e2(a3);
    });
  }
  async onMoved(e2) {
    return this.listen("tauri://move", (a3) => {
      a3.payload = v(a3.payload), e2(a3);
    });
  }
  async onCloseRequested(e2) {
    return this.listen("tauri://close-requested", (a3) => {
      let n = new y(a3);
      Promise.resolve(e2(n)).then(() => {
        if (!n.isPreventDefault())
          return this.close();
      });
    });
  }
  async onFocusChanged(e2) {
    let a3 = await this.listen("tauri://focus", (d) => {
      e2({ ...d, payload: true });
    }), n = await this.listen("tauri://blur", (d) => {
      e2({ ...d, payload: false });
    });
    return () => {
      a3(), n();
    };
  }
  async onScaleChanged(e2) {
    return this.listen("tauri://scale-change", e2);
  }
  async onMenuClicked(e2) {
    return this.listen("tauri://menu", e2);
  }
  async onFileDropEvent(e2) {
    let a3 = await this.listen("tauri://file-drop", (l) => {
      e2({ ...l, payload: { type: "drop", paths: l.payload } });
    }), n = await this.listen("tauri://file-drop-hover", (l) => {
      e2({ ...l, payload: { type: "hover", paths: l.payload } });
    }), d = await this.listen("tauri://file-drop-cancelled", (l) => {
      e2({ ...l, payload: { type: "cancel" } });
    });
    return () => {
      a3(), n(), d();
    };
  }
  async onThemeChanged(e2) {
    return this.listen("tauri://theme-changed", e2);
  }
};
var y = class {
  constructor(e2) {
    this._preventDefault = false;
    this.event = e2.event, this.windowLabel = e2.windowLabel, this.id = e2.id;
  }
  preventDefault() {
    this._preventDefault = true;
  }
  isPreventDefault() {
    return this._preventDefault;
  }
};
var s = class extends b {
  constructor(e2, a3 = {}) {
    super(e2), (a3 == null ? void 0 : a3.skip) || a({ __tauriModule: "Window", message: { cmd: "createWebview", data: { options: { label: e2, ...a3 } } } }).then(async () => this.emit("tauri://created")).catch(async (n) => this.emit("tauri://error", n));
  }
  static getByLabel(e2) {
    return h().some((a3) => a3.label === e2) ? new s(e2, { skip: true }) : null;
  }
  static async getFocusedWindow() {
    for (let e2 of h())
      if (await e2.isFocused())
        return e2;
    return null;
  }
};
var g;
"__TAURI_METADATA__" in window ? g = new s(window.__TAURI_METADATA__.__currentWindow.label, { skip: true }) : (console.warn(`Could not find "window.__TAURI_METADATA__". The "appWindow" value will reference the "main" window label.
Note that this is not an issue if running this frontend on a browser instead of a Tauri window.`), g = new s("main", { skip: true }));
function p(t) {
  return t === null ? null : { name: t.name, scaleFactor: t.scaleFactor, position: v(t.position), size: f(t.size) };
}
function v(t) {
  return new r(t.x, t.y);
}
function f(t) {
  return new o(t.width, t.height);
}
async function C() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "currentMonitor" } } } }).then(p);
}
async function T() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "primaryMonitor" } } } }).then(p);
}
async function D() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "availableMonitors" } } } }).then((t) => t.map(p));
}

export {
  S,
  m2 as m,
  o,
  c,
  r,
  W,
  E,
  h,
  u2 as u,
  b,
  y,
  s,
  g,
  C,
  T,
  D
};
//# sourceMappingURL=chunk-5IDMJ45J.js.map
