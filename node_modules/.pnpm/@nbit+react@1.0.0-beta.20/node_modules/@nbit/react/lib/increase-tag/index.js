'use strict';

var Decimal = require('decimal.js');
var utils = require('@nbit/utils');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Decimal__default = /*#__PURE__*/_interopDefaultLegacy(Decimal);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const defaultProps = {
    hasColor: true,
    hasPrefix: true,
    hasPostfix: false,
    isRound: false,
    kSign: true,
    needPercentCalc: false,
    delZero: true,
    defaultEmptyText: '--',
    diffTarget: 0,
};
/** 涨跌组件，支持涨跌色、千分位、前后缀正值负值符号等、 */
const IncreaseTag = (props) => {
    const { left, right, hasFather, digits } = props;
    const value = `${props.value === undefined ? '--' : props.value}`;
    const increaseClassStr = props.hasColor ? utils.marketUtils.getColorClassByPrice(value, props.diffTarget) : '';
    const increaseClassStrWrap = increaseClassStr ? `tag-wrap-${increaseClassStr}` : 'tag-wrap';
    const _digits = digits ?? utils.decimalUtils.getDigits(value);
    /**
     * @description: 处理前缀、后缀、千分位、逗号格式化
     * @param {number} val
     * @param {string} origin
     * @param {*} postfix
     */
    const getformatFixStr = (val, origin, postfix = '%') => {
        const { hasPrefix, hasPostfix, kSign } = props;
        let str = '';
        if (hasPrefix) {
            const comparedZeroRes = utils.decimalUtils.getSafeDecimal(val).comparedTo(utils.decimalUtils.getSafeDecimal(0));
            const prefix = comparedZeroRes === 1 ? '+' : '';
            str = `${prefix}${str}`;
        }
        str = `${str}${val}`;
        if (hasPostfix) {
            str = `${str}${postfix}`;
        }
        // 是否添加千位分隔符
        if (kSign) {
            const list = str.split('.');
            if (list.length > 1) ;
            const decimal = list.length > 1 ? `.${list[1]}` : '';
            str = list[0].replace(/(\d)(?=(?:\d{3})+$)/g, '$1,') + decimal;
        }
        return str;
    };
    /**
     * @description: 获取最终页面展示值
     */
    const getIncreaseNumber = () => {
        const { isCheckZero, defaultEmptyText, hasPostfix, delZero, isRound, needPercentCalc } = props;
        if (value === '' || value === '--' || value === undefined) {
            return defaultEmptyText;
        }
        if (isCheckZero) {
            if (value === '0') {
                return defaultEmptyText;
            }
        }
        let accurateVal;
        // 最终显示值不需要后缀
        if (!hasPostfix) {
            accurateVal = utils.decimalUtils.formatZeroPrefix(utils.decimalUtils.getSafeDecimal(value).toFixed(_digits, isRound ? Decimal__default["default"].ROUND_HALF_UP : Decimal__default["default"].ROUND_DOWN), _digits);
            if (delZero) {
                accurateVal = utils.decimalUtils.removeDecimalZero(accurateVal);
            }
            return getformatFixStr(accurateVal, value, '');
        }
        // 需要后缀、后端没处理过得值
        // 需要处理百分比计算。这是默认选项
        if (needPercentCalc) {
            accurateVal = utils.decimalUtils.formatZeroPrefix(utils.decimalUtils
                .getSafeDecimal(value)
                .mul(Math.pow(10, 2))
                .toFixed(_digits, isRound ? Decimal__default["default"].ROUND_HALF_UP : Decimal__default["default"].ROUND_DOWN), _digits);
            if (delZero) {
                accurateVal = utils.decimalUtils.removeDecimalZero(accurateVal);
            }
            return getformatFixStr(accurateVal, value, '%');
        }
        // 不需要处理百分比
        accurateVal = utils.decimalUtils.formatZeroPrefix(utils.decimalUtils.getSafeDecimal(value).toFixed(_digits, isRound ? Decimal__default["default"].ROUND_HALF_UP : Decimal__default["default"].ROUND_DOWN), _digits);
        if (delZero) {
            accurateVal = utils.decimalUtils.removeDecimalZero(accurateVal);
        }
        return getformatFixStr(accurateVal);
    };
    if (hasFather) {
        return (React__default["default"].createElement("span", { className: `${increaseClassStrWrap}` },
            React__default["default"].createElement("span", { className: `increase-wrap ${increaseClassStr}` },
                left && left,
                getIncreaseNumber(),
                right && right)));
    }
    return (React__default["default"].createElement("span", { className: `increase-wrap ${increaseClassStr}` },
        left && left,
        getIncreaseNumber(),
        right && right));
};
IncreaseTag.defaultProps = defaultProps;
var index = React.memo(IncreaseTag);

module.exports = index;
