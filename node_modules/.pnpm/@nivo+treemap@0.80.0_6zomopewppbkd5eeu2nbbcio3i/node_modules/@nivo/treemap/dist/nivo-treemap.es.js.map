{"version":3,"file":"nivo-treemap.es.js","sources":["../src/transitions.ts","../src/TreeMapNode.tsx","../src/TreeMapNodeTooltip.tsx","../src/TreeMapHtmlNode.tsx","../src/defaults.ts","../src/tiling.ts","../src/hooks.ts","../src/TreeMapNodes.tsx","../src/TreeMap.tsx","../src/ResponsiveTreeMap.tsx","../src/TreeMapHtml.tsx","../src/ResponsiveTreeMapHtml.tsx","../src/TreeMapCanvas.tsx","../src/ResponsiveTreeMapCanvas.tsx"],"sourcesContent":["import { to, SpringValue } from '@react-spring/web'\n\nexport const svgNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x},${y})`)\n\nexport const htmlNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n\nexport const svgLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x},${y}) rotate(${rotation})`)\n\nexport const htmlLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x}px,${y}px) rotate(${rotation}deg)`)\n\nexport const htmlParentLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) =>\n    to(\n        [x, y, rotation],\n        (x, y, rotation) =>\n            `translate(${x - (rotation === 0 ? 0 : 5)}px,${\n                y - (rotation === 0 ? 5 : 0)\n            }px) rotate(${rotation}deg)`\n    )\n","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { svgNodeTransform, svgLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={svgNodeTransform(animatedProps.x, animatedProps.y)}>\n            <animated.rect\n                data-testid={`node.${node.id}`}\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    data-testid={`label.${node.id}`}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.labelX,\n                        animatedProps.labelY,\n                        animatedProps.labelRotation\n                    )}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    data-testid={`parentLabel.${node.id}`}\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.parentLabelX,\n                        animatedProps.parentLabelY,\n                        animatedProps.parentLabelRotation\n                    )}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const TreeMapNode = memo(NonMemoizedTreeMapNode) as typeof NonMemoizedTreeMapNode\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nconst NonMemoizedTreeMapNodeTooltip = <Datum extends object>({ node }: TooltipProps<Datum>) => (\n    <BasicTooltip id={node.id} value={node.formattedValue} enableChip={true} color={node.color} />\n)\n\nexport const TreeMapNodeTooltip = memo(\n    NonMemoizedTreeMapNodeTooltip\n) as typeof NonMemoizedTreeMapNodeTooltip\n","import { memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { htmlNodeTransform, htmlLabelTransform, htmlParentLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapHtmlNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            data-testid={`node.${node.id}`}\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: htmlNodeTransform(animatedProps.x, animatedProps.y),\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    data-testid={`label.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: htmlLabelTransform(\n                            animatedProps.labelX,\n                            animatedProps.labelY,\n                            animatedProps.labelRotation\n                        ),\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    data-testid={`parentLabel.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: htmlParentLabelTransform(\n                            animatedProps.parentLabelX,\n                            animatedProps.parentLabelY,\n                            animatedProps.parentLabelRotation\n                        ),\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nexport const TreeMapHtmlNode = memo(NonMemoizedTreeMapHtmlNode) as typeof NonMemoizedTreeMapHtmlNode\n","import { TreeMapCommonProps, DefaultTreeMapDatum, LayerId } from './types'\nimport { TreeMapNode } from './TreeMapNode'\nimport { TreeMapNodeTooltip } from './TreeMapNodeTooltip'\nimport { TreeMapHtmlNode } from './TreeMapHtmlNode'\n\nexport const commonDefaultProps: Omit<\n    TreeMapCommonProps<DefaultTreeMapDatum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['nodes'],\n\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' as const },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: TreeMapNodeTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    defs: [],\n    fill: [],\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import {\n    treemapBinary,\n    treemapDice,\n    treemapSlice,\n    treemapSliceDice,\n    treemapSquarify,\n} from 'd3-hierarchy'\n\nexport const tileByType = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    sliceDice: treemapSliceDice,\n    squarify: treemapSquarify,\n} as const\n\nexport type TileType = keyof typeof tileByType\n","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport {\n    treemap as d3Treemap,\n    hierarchy,\n    HierarchyNode,\n    HierarchyRectangularNode,\n} from 'd3-hierarchy'\nimport { useTheme, useValueFormatter, PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { commonDefaultProps } from './defaults'\nimport {\n    DefaultTreeMapDatum,\n    TreeMapCommonProps,\n    TreeMapDataProps,\n    ComputedNode,\n    ComputedNodeWithoutStyles,\n    ComputedNodeWithHandlers,\n    CustomLayerProps,\n} from './types'\nimport { tileByType } from './tiling'\n\nexport const useTreeMapLayout = <Datum extends object>({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}: {\n    width: number\n    height: number\n    tile: TreeMapCommonProps<Datum>['tile']\n    innerPadding: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding: TreeMapCommonProps<Datum>['outerPadding']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabelSize: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition: TreeMapCommonProps<Datum>['parentLabelPosition']\n    leavesOnly: TreeMapCommonProps<Datum>['leavesOnly']\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap<Datum>()\n            .size([width, height])\n            .tile(tileByType[tile])\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            // @ts-ignore\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = <Datum extends object>({\n    root,\n    getValue,\n}: {\n    root: Datum\n    getValue: (datum: Datum) => number\n}) => useMemo(() => hierarchy<Datum>(root).sum(getValue), [root, getValue])\n\nconst computeNodeIdAndPath = <Datum extends object>(\n    node: HierarchyNode<Datum>,\n    getIdentity: (node: Datum) => string\n) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return { path: path.join('.'), pathComponents: path }\n}\n\nexport const useTreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity as PropertyAccessor<Datum, string>,\n    value = commonDefaultProps.value as PropertyAccessor<Datum, number>,\n    valueFormat,\n    leavesOnly = commonDefaultProps.leavesOnly,\n    tile = commonDefaultProps.tile,\n    innerPadding = commonDefaultProps.innerPadding,\n    outerPadding = commonDefaultProps.outerPadding,\n    label = commonDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    orientLabel = commonDefaultProps.orientLabel,\n    enableParentLabel = commonDefaultProps.enableParentLabel,\n    parentLabel = commonDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = commonDefaultProps.parentLabelSize,\n    parentLabelPosition = commonDefaultProps.parentLabelPosition,\n    parentLabelPadding = commonDefaultProps.parentLabelPadding,\n    colors = commonDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = commonDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = commonDefaultProps.nodeOpacity,\n    borderColor = commonDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    labelTextColor = commonDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    parentLabelTextColor = commonDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n}: {\n    data: TreeMapDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: TreeMapCommonProps<Datum>['identity']\n    value?: TreeMapCommonProps<Datum>['value']\n    valueFormat?: TreeMapCommonProps<Datum>['valueFormat']\n    tile?: TreeMapCommonProps<Datum>['tile']\n    leavesOnly?: TreeMapCommonProps<Datum>['leavesOnly']\n    innerPadding?: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding?: TreeMapCommonProps<Datum>['outerPadding']\n    label?: TreeMapCommonProps<Datum>['label']\n    orientLabel?: TreeMapCommonProps<Datum>['orientLabel']\n    enableParentLabel?: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabel?: TreeMapCommonProps<Datum>['parentLabel']\n    parentLabelSize?: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition?: TreeMapCommonProps<Datum>['parentLabelPosition']\n    parentLabelPadding?: TreeMapCommonProps<Datum>['parentLabelPadding']\n    colors?: TreeMapCommonProps<Datum>['colors']\n    colorBy?: TreeMapCommonProps<Datum>['colorBy']\n    nodeOpacity?: TreeMapCommonProps<Datum>['nodeOpacity']\n    borderColor?: TreeMapCommonProps<Datum>['borderColor']\n    labelTextColor?: TreeMapCommonProps<Datum>['labelTextColor']\n    parentLabelTextColor?: TreeMapCommonProps<Datum>['parentLabelTextColor']\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n    const getParentLabel = usePropertyAccessor(parentLabel)\n\n    const layout = useTreeMapLayout<Datum>({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy<Datum>({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return (\n            leavesOnly ? root.leaves() : root.descendants()\n        ) as HierarchyRectangularNode<Datum>[]\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const { path, pathComponents } = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value!,\n                    formattedValue: formatValue(rawNode.value!),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                    parentLabelX: 0,\n                    parentLabelY: 0,\n                    parentLabelRotation: 0,\n                } as ComputedNodeWithoutStyles<Datum>\n\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n\n                return node\n            }),\n        [\n            rawNodes,\n            getIdentity,\n            formatValue,\n            getLabel,\n            orientLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const nodesWithStyles = useMemo(\n        () =>\n            nodes.map(node => {\n                const nodeWithStyles = {\n                    ...node,\n                    color: getColor(node),\n                    opacity: nodeOpacity,\n                } as ComputedNode<Datum>\n\n                nodeWithStyles.borderColor = getBorderColor(nodeWithStyles)\n                nodeWithStyles.labelTextColor = getLabelTextColor(nodeWithStyles)\n                nodeWithStyles.parentLabelTextColor = getParentLabelTextColor(nodeWithStyles)\n\n                return nodeWithStyles\n            }),\n        [nodes, getColor, nodeOpacity, getBorderColor, getLabelTextColor, getParentLabelTextColor]\n    )\n\n    return {\n        hierarchy,\n        nodes: nodesWithStyles,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: {\n        isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n        onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n        onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n        onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n        onClick?: TreeMapCommonProps<Datum>['onClick']\n        tooltip: TreeMapCommonProps<Datum>['tooltip']\n    }\n): ComputedNodeWithHandlers<Datum>[] => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter?.(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove?.(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(\n        () =>\n            nodes.map(node => {\n                if (!isInteractive) return node\n\n                return {\n                    ...node,\n                    onMouseEnter: (event: MouseEvent) => handleMouseEnter(node, event),\n                    onMouseMove: (event: MouseEvent) => handleMouseMove(node, event),\n                    onMouseLeave: (event: MouseEvent) => handleMouseLeave(node, event),\n                    onClick: (event: MouseEvent) => handleClick(node, event),\n                }\n            }),\n        [isInteractive, nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useCustomLayerProps = <Datum extends object>({\n    nodes,\n}: CustomLayerProps<Datum>): CustomLayerProps<Datum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import { createElement, memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\nimport {\n    ComputedNode,\n    TreeMapCommonProps,\n    NodeAnimatedProps,\n    NodeComponent,\n    ComputedNodeWithHandlers,\n} from './types'\n\nconst getAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height,\n    color: node.color,\n    labelX: node.width / 2,\n    labelY: node.height / 2,\n    labelRotation: node.labelRotation,\n    labelOpacity: 1,\n    parentLabelX: node.parentLabelX,\n    parentLabelY: node.parentLabelY,\n    parentLabelRotation: node.parentLabelRotation,\n    parentLabelOpacity: 1,\n})\n\nconst getEndingAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        x,\n        y,\n        width: 0,\n        height: 0,\n        color: node.color,\n        labelX: 0,\n        labelY: 0,\n        labelRotation: node.labelRotation,\n        labelOpacity: 0,\n        parentLabelX: 0,\n        parentLabelY: 0,\n        parentLabelRotation: node.parentLabelRotation,\n        parentLabelOpacity: 0,\n    }\n}\n\ninterface TreeMapNodesProps<Datum extends object> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    borderWidth: TreeMapCommonProps<Datum>['borderWidth']\n    enableLabel: TreeMapCommonProps<Datum>['enableLabel']\n    labelSkipSize: TreeMapCommonProps<Datum>['labelSkipSize']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n    onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n    onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n    onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n    onClick?: TreeMapCommonProps<Datum>['onClick']\n    tooltip: TreeMapCommonProps<Datum>['tooltip']\n}\n\nconst NonMemoizedTreeMapNodes = <Datum extends object>({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: TreeMapNodesProps<Datum>) => {\n    const nodesWithHandlers = useInteractiveTreeMapNodes<Datum>(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<ComputedNodeWithHandlers<Datum>, NodeAnimatedProps>(\n        nodesWithHandlers,\n        {\n            keys: node => node.path,\n            initial: getAnimatedNodeProps,\n            from: getEndingAnimatedNodeProps,\n            enter: getAnimatedNodeProps,\n            update: getAnimatedNodeProps,\n            leave: getEndingAnimatedNodeProps,\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.path,\n                    node,\n                    animatedProps,\n                    borderWidth,\n                    enableLabel,\n                    labelSkipSize,\n                    enableParentLabel,\n                })\n            )}\n        </>\n    )\n}\n\nexport const TreeMapNodes = memo(NonMemoizedTreeMapNodes) as typeof NonMemoizedTreeMapNodes\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    SvgWrapper,\n    Container,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { useTreeMap, useCustomLayerProps } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport {\n    DefaultTreeMapDatum,\n    NodeComponent,\n    TreeMapCommonProps,\n    TreeMapSvgProps,\n    LayerId,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\ntype InnerTreeMapProps<Datum extends object> = Omit<\n    TreeMapSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMap = <Datum extends object>({\n    data,\n    identity = svgDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = svgDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    valueFormat,\n    tile = svgDefaultProps.tile,\n    nodeComponent = svgDefaultProps.nodeComponent as NodeComponent<Datum>,\n    innerPadding = svgDefaultProps.innerPadding,\n    outerPadding = svgDefaultProps.outerPadding,\n    leavesOnly = svgDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapSvgProps<Datum>['layers']>,\n    colors = svgDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = svgDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = svgDefaultProps.orientLabel,\n    labelSkipSize = svgDefaultProps.labelSkipSize,\n    enableParentLabel = svgDefaultProps.enableParentLabel,\n    parentLabel = svgDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = svgDefaultProps.parentLabelSize,\n    parentLabelPosition = svgDefaultProps.parentLabelPosition,\n    parentLabelPadding = svgDefaultProps.parentLabelPadding,\n    parentLabelTextColor = svgDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMap<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapSvgProps } from './types'\nimport { TreeMap } from './TreeMap'\n\nexport const ResponsiveTreeMap = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapSvgProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useCustomLayerProps, useTreeMap } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapHtmlProps, LayerId } from './types'\nimport { htmlDefaultProps, svgDefaultProps } from './defaults'\n\ntype InnerTreeMapHtmlProps<Datum extends object> = Omit<\n    TreeMapHtmlProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapHtml = <Datum extends object>({\n    data,\n    identity = htmlDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = htmlDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    tile = htmlDefaultProps.tile,\n    nodeComponent = htmlDefaultProps.nodeComponent,\n    valueFormat,\n    innerPadding = htmlDefaultProps.innerPadding,\n    outerPadding = htmlDefaultProps.outerPadding,\n    leavesOnly = htmlDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapHtmlProps<Datum>['layers']>,\n    colors = htmlDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = htmlDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = htmlDefaultProps.nodeOpacity,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = htmlDefaultProps.enableLabel,\n    label = htmlDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = htmlDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = htmlDefaultProps.orientLabel,\n    labelSkipSize = htmlDefaultProps.labelSkipSize,\n    enableParentLabel = htmlDefaultProps.enableParentLabel,\n    parentLabel = htmlDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = htmlDefaultProps.parentLabelSize,\n    parentLabelPosition = htmlDefaultProps.parentLabelPosition,\n    parentLabelPadding = htmlDefaultProps.parentLabelPadding,\n    parentLabelTextColor = htmlDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapHtmlProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    return (\n        <div\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                {layers.map((layer, i) => {\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                    }\n\n                    return layerById?.[layer] ?? null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const TreeMapHtml = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapHtmlProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMapHtml<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapHtmlProps } from './types'\nimport { TreeMapHtml } from './TreeMapHtml'\n\nexport const ResponsiveTreeMapHtml = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapHtmlProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    Container,\n    useDimensions,\n    useTheme,\n    Margin,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useTreeMap } from './hooks'\nimport { ComputedNode, DefaultTreeMapDatum, TreeMapCanvasProps, TreeMapCommonProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst findNodeUnderCursor = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\ntype InnerTreeMapCanvasProps<Datum extends object> = Omit<\n    TreeMapCanvasProps<Datum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapCanvas = <Datum extends object>({\n    data,\n    identity = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['value'],\n    tile = canvasDefaultProps.tile,\n    valueFormat,\n    innerPadding = canvasDefaultProps.innerPadding,\n    outerPadding = canvasDefaultProps.outerPadding,\n    leavesOnly = canvasDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors = canvasDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = canvasDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = canvasDefaultProps.nodeOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelSkipSize = canvasDefaultProps.labelSkipSize,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(`${node.label}`, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick?.(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: TreeMapCanvasProps<Datum>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerTreeMapCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapCanvasProps } from './types'\nimport { TreeMapCanvas } from './TreeMapCanvas'\n\nexport const ResponsiveTreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapCanvasProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["svgNodeTransform","x","y","to","htmlNodeTransform","svgLabelTransform","rotation","htmlLabelTransform","htmlParentLabelTransform","TreeMapNode","memo","node","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","isLeaf","Math","min","width","height","showParentLabel","isParent","_jsxs","animated","g","transform","_jsx","rect","id","v","max","fill","color","strokeWidth","stroke","borderColor","fillOpacity","opacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","text","textAnchor","dominantBaseline","style","labels","labelTextColor","pointerEvents","labelOpacity","labelX","labelY","labelRotation","label","parentLabelTextColor","parentLabelOpacity","parentLabelX","parentLabelY","parentLabelRotation","parentLabel","TreeMapNodeTooltip","BasicTooltip","value","formattedValue","enableChip","TreeMapHtmlNode","div","path","replace","boxSizing","position","top","left","borderStyle","overflow","background","span","display","justifyContent","alignItems","whiteSpace","transformOrigin","commonDefaultProps","layers","identity","tile","leavesOnly","innerPadding","outerPadding","colors","scheme","colorBy","nodeOpacity","from","modifiers","orientLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","tooltip","role","animate","motionConfig","svgDefaultProps","nodeComponent","defs","htmlDefaultProps","canvasDefaultProps","pixelRatio","window","devicePixelRatio","tileByType","binary","treemapBinary","dice","treemapDice","slice","treemapSlice","sliceDice","treemapSliceDice","squarify","treemapSquarify","useHierarchy","root","getValue","useMemo","hierarchy","sum","useTreeMap","data","valueFormat","getIdentity","usePropertyAccessor","formatValue","useValueFormatter","getLabel","getParentLabel","layout","treemap","d3Treemap","size","round","paddingInner","paddingOuter","startCase","useTreeMapLayout","rawNodes","cloneDeep","leaves","descendants","nodes","map","rawNode","ancestors","ancestor","reverse","join","pathComponents","computeNodeIdAndPath","omit","x0","y0","x1","y1","treeDepth","depth","treeHeight","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","nodesWithStyles","nodeWithStyles","useCustomLayerProps","getAnimatedNodeProps","getEndingAnimatedNodeProps","TreeMapNodes","nodesWithHandlers","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useInteractiveTreeMapNodes","useMotionConfig","springConfig","config","transition","useTransition","keys","initial","enter","update","leave","immediate","key","InnerTreeMap","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","includes","customLayerProps","boundDefs","bindDefs","SvgWrapper","layer","i","Fragment","TreeMap","renderWrapper","otherProps","Container","ResponsiveTreeMap","props","ResponsiveWrapper","InnerTreeMapHtml","TreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","find","isCursorInRect","InnerTreeMapCanvas","canvasEl","useRef","useEffect","current","ctx","getContext","scale","fillStyle","fillRect","translate","forEach","strokeStyle","lineWidth","strokeRect","textAlign","textBaseline","font","fontSize","fontFamily","rotate","save","degreesToRadians","fillText","restore","handleMouseHover","getRelativeCursor","undefined","ref","TreeMapCanvas","ResponsiveTreeMapCanvas"],"mappings":"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"}